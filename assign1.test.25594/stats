#!/bin/bash -e

#Specify temp file name
tempFileName="tmp$$"

#Set up trap for exit, interrupt, hangup, and terminate signals
trap "rm -f $tempFileName; exit" EXIT INT HUP TERM

#Check for correct number of parameters
correctCmdMsg="./stats {-rows|-cols} [file]"
if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]
then
   echo $correctCmdMsg >&2
   exit 1
fi

#Check if the row/column args start with either "-r" or "-c"
rowArgName="-r"
colArgName="-c"
if [ "${1:0:2}" != $rowArgName ] && [ "${1:0:2}" != $colArgName ]
then
   echo $correctCmdMsg >&2
   exit 1
fi

#If file is specified, check file is readable 
if [ ! -r "$2" ] && [ "$#" -eq 2 ]
then
   fileNotExistMsg="stats: cannot read $2"
   echo $fileNotExistMsg >&2
   exit 1
fi

#Process mean and median from rows
if [ "${1:0:2}" == $rowArgName ]
then
   #Add Column header for "row" mode
   echo "Average	Median" | cat >> $tempFileName

   while read -r line
   do

      numValuesInRow=$(echo $line | wc -w)
      valuesInLine=$(echo $line | tr "	" "\n")

      #------Row Average Processing---------------

      #Find the sum of all the numbers in the row
      sumTotal=0
      for num in $valuesInLine
      do
	 #echo "[$num]" | cat >> $tempFileName
	 sumTotal=$(expr $sumTotal + $num) 
      done

      #Find the average without rounding
      rowAverage=$(expr $sumTotal / $numValuesInRow )

      #Check if we need to round up (increment if we do)
      remainder=$(expr $sumTotal % $numValuesInRow )
      doubleRemainder=$(expr $remainder \* 2 )
      if [ "$doubleRemainder" -ge "$numValuesInRow"  ]
      then
	 #If the double the remainder is greater than denominator then round up
	 rowAverage=$(expr $rowAverage + 1 )
      fi

      #------Row Median Processing---------------

      #Sort the numbers in the row
      #     Sort is done by transforming the space delimited string
      #     to a new line delimted string then sorting. Then transforming
      #     back to space delimited string
      sortedRowNums=$(echo $valuesInLine | tr " " "\n" | sort -g | tr "\n" " ")

      #Get the median
      #     The method of grabbing the median is the same for files
      #     with odd/even number of values. For odd number of values,
      #     we are getting the middle number from the sorted string.
      #     For odd number of values, we are getting the larger of 
      #     the two middle values. 
      medianPosition=$(expr \( $numValuesInRow / 2 \) + 1  )
      rowMedian=$(echo $sortedRowNums | cut -d " " -f $medianPosition)

      echo "$rowAverage	$rowMedian" | cat >> $tempFileName
   done < "${2:-/dev/stdin}" #Read from specified file or stdin
fi

#Process mean and median from columns
if [ "${1:0:2}" == $colArgName ]
then
   if [ "$#" -eq 2 ]
   then
      numValuesInRow=$(head -n 1 $2 | wc -w)
   else
      numValuesInRow=$(head -n 1 | wc -w)

      allColumns=""
      newSpace=$'\n'
      while read line
      do
	 allColumns="$allColumns$newSpace$line"
      done < /dev/stdin
   fi

   #---------------------Column Average Processing-----------------------------
   echo "Averages:" | cat >> $tempFileName
  
   # Create a for loop that loops till numValuesInRow
   # For each iteration use: cut -f 1 test_file1
   # This example gets the first field.
   averageResults=""
   for i in $(seq 1 $numValuesInRow)
   do
      if [ "$#" -eq 2 ]
      then
	 columnValues=$(cut -f $i $2 | tr "\n" " ")
      else
	 columnValues=$(echo "$allColumns" | cut -f $i | tr "\n" " ")
	 #echo "columnValues: $columnValues" | cat >> $tempFileName
      fi
      numValuesInCol=$(echo $columnValues | wc -w)

      #Find the sum total of the column 
      sumTotal=0
      for num in $columnValues
      do
	 sumTotal=$(expr $sumTotal + $num) 
      done

      #Find the average without rounding
      colAverage=$(expr $sumTotal / $numValuesInCol )

      #Check if we need to round up (increment if we do)
      remainder=$(expr $sumTotal % $numValuesInCol )
      doubleRemainder=$(expr $remainder \* 2 )
      if [ "$doubleRemainder" -ge "$numValuesInCol"  ]
      then
	 #If the double the remainder is greater than denominator then round up
	 colAverage=$(expr $colAverage + 1 )
      fi

      if [ $i -eq 1 ]
      then
	 averageResults="$colAverage"
      else
	 averageResults="$averageResults	$colAverage"
      fi
   done
   echo "$averageResults" | cat >> $tempFileName

   #---------------------Column Median Processing-----------------------------
   echo "Medians:" | cat >> $tempFileName

   medianResults=""
   for i in $(seq 1 $numValuesInRow)
   do
      if [ "$#" -eq 2 ]
      then
	 columnValues=$(cut -f $i $2 | tr "\n" " ")
      else
	 columnValues=$(echo "$allColumns" | cut -f $i | tr "\n" " ")
      fi
      numValuesInCol=$(echo $columnValues | wc -w)

      #Sort the numbers in the row
      #     Sort is done by transforming the space delimited string
      #     to a new line delimted string then sorting. Then transforming
      #     back to space delimited string
      #sortedColNums=$(echo $columnValues | tr " " "\n" | sort | tr "\n" " ")
      sortedColNums=$(echo $columnValues | tr " " "\n" | sort -g | tr "\n" " ")

      #Get the median
      #     The method of grabbing the median is the same for files
      #     with odd/even number of values. For odd number of values,
      #     we are getting the middle number from the sorted string.
      #     For odd number of values, we are getting the larger of 
      #     the two middle values. 
      medianPosition=$(expr \( $numValuesInCol / 2 \) + 1  )
      colMedian=$(echo $sortedColNums | cut -d " " -f $medianPosition)

      if [ $i -eq 1 ]
      then
	 medianResults="$colMedian"
      else
	 medianResults="$medianResults	$colMedian"
      fi
   
   done
   echo "$medianResults" | cat >> $tempFileName

fi

cat $tempFileName
